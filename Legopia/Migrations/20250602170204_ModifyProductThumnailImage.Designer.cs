// <auto-generated />
using System;
using Legopia.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Legopia.Migrations
{
    [DbContext(typeof(LegopiaDbContext))]
    [Migration("20250602170204_ModifyProductThumnailImage")]
    partial class ModifyProductThumnailImage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Legopia.Models.Entities.Cart", b =>
                {
                    b.Property<string>("UserDetailsId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_details_id");

                    b.HasKey("UserDetailsId");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("Legopia.Models.Entities.CartItem", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("cart_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("cart_items");
                });

            modelBuilder.Entity("Legopia.Models.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("coupon_code");

                    b.Property<int>("CouponStatus")
                        .HasColumnType("int")
                        .HasColumnName("coupon_status");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("discount_amount");

                    b.Property<float?>("DiscountPercentage")
                        .HasColumnType("real")
                        .HasColumnName("discount_percentage");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<decimal?>("MinimumOrderAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("minimum_order_amount");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("int")
                        .HasColumnName("usage_limit");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int")
                        .HasColumnName("used_count");

                    b.HasKey("Id");

                    b.ToTable("coupons");
                });

            modelBuilder.Entity("Legopia.Models.Entities.OrderCouponJoining", b =>
                {
                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("coupon_id");

                    b.HasKey("OrderId", "CouponId");

                    b.HasIndex("CouponId");

                    b.ToTable("order_coupon_joining");
                });

            modelBuilder.Entity("Legopia.Models.Entities.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("shipping_address");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("order_date");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int")
                        .HasColumnName("order_status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<string>("UserDetailsId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_details_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[shipping_address] IS NOT NULL");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Legopia.Models.Entities.OrderItem", b =>
                {
                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("Legopia.Models.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("author_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int>("PostStatus")
                        .HasColumnType("int")
                        .HasColumnName("post_status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("Legopia.Models.Entities.PostCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PostCategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("post_category_name");

                    b.HasKey("Id");

                    b.ToTable("post_categories");
                });

            modelBuilder.Entity("Legopia.Models.Entities.PostTagJoining", b =>
                {
                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int?>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("post_tags");
                });

            modelBuilder.Entity("Legopia.Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<float?>("DiscountPercentage")
                        .HasColumnType("real")
                        .HasColumnName("discount_percentage");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("discount_price");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("product_category_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_name");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("short_description");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.Property<int?>("ThumbnailImageId")
                        .HasColumnType("int")
                        .HasColumnName("thumbnail_image_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ThumbnailImageId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Legopia.Models.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("category_name");

                    b.HasKey("Id");

                    b.ToTable("product_categories");
                });

            modelBuilder.Entity("Legopia.Models.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image_data");

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_file_name");

                    b.HasKey("Id");

                    b.ToTable("product_images");
                });

            modelBuilder.Entity("Legopia.Models.Entities.ProductImageJoining", b =>
                {
                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("ProductImageId")
                        .HasColumnType("int")
                        .HasColumnName("product_image_id");

                    b.HasKey("ProductId", "ProductImageId");

                    b.HasIndex("ProductImageId");

                    b.ToTable("product_image_joinings");
                });

            modelBuilder.Entity("Legopia.Models.Entities.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserDetailsId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_details_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("Legopia.Models.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tag_name");

                    b.HasKey("Id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Legopia.Models.Identity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserDetailsId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_details_id");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailsId")
                        .IsUnique()
                        .HasFilter("[user_details_id] IS NOT NULL");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("Legopia.Models.Identity.UserDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("user_details");
                });

            modelBuilder.Entity("Legopia.Models.Identity.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("Legopia.Models.Identity.UserRoleDetailsJoining", b =>
                {
                    b.Property<string>("UserDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserDetailsId", "UserRoleId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("user_role_details_joining", "identity");
                });

            modelBuilder.Entity("Legopia.Models.Entities.Cart", b =>
                {
                    b.HasOne("Legopia.Models.Identity.UserDetails", "UserDetails")
                        .WithOne("Cart")
                        .HasForeignKey("Legopia.Models.Entities.Cart", "UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("Legopia.Models.Entities.CartItem", b =>
                {
                    b.HasOne("Legopia.Models.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Legopia.Models.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Legopia.Models.Entities.OrderCouponJoining", b =>
                {
                    b.HasOne("Legopia.Models.Entities.Coupon", "Coupon")
                        .WithMany("OrderCouponJoinings")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Legopia.Models.Entities.OrderDetails", "Order")
                        .WithMany("OrderCouponJoinings")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Legopia.Models.Entities.OrderDetails", b =>
                {
                    b.HasOne("Legopia.Models.Identity.Address", "Address")
                        .WithOne("OrderDetails")
                        .HasForeignKey("Legopia.Models.Entities.OrderDetails", "AddressId");

                    b.HasOne("Legopia.Models.Identity.UserDetails", "UserDetails")
                        .WithMany("OrderDetails")
                        .HasForeignKey("UserDetailsId");

                    b.Navigation("Address");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("Legopia.Models.Entities.OrderItem", b =>
                {
                    b.HasOne("Legopia.Models.Entities.OrderDetails", "OrderDetails")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Legopia.Models.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderDetails");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Legopia.Models.Entities.Post", b =>
                {
                    b.HasOne("Legopia.Models.Identity.UserDetails", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Legopia.Models.Entities.PostCategory", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Legopia.Models.Entities.PostTagJoining", b =>
                {
                    b.HasOne("Legopia.Models.Entities.Post", "Post")
                        .WithMany("PostTagJoinings")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Legopia.Models.Entities.Tag", "Tag")
                        .WithMany("PostTagJoinings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Legopia.Models.Entities.Product", b =>
                {
                    b.HasOne("Legopia.Models.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("Legopia.Models.Entities.ProductImage", "ThumbnailImageFile")
                        .WithMany()
                        .HasForeignKey("ThumbnailImageId");

                    b.Navigation("ProductCategory");

                    b.Navigation("ThumbnailImageFile");
                });

            modelBuilder.Entity("Legopia.Models.Entities.ProductImageJoining", b =>
                {
                    b.HasOne("Legopia.Models.Entities.Product", "Product")
                        .WithMany("ProductImageJoining")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Legopia.Models.Entities.ProductImage", "ProductImage")
                        .WithMany("ProductImageJoinings")
                        .HasForeignKey("ProductImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductImage");
                });

            modelBuilder.Entity("Legopia.Models.Entities.ProductReview", b =>
                {
                    b.HasOne("Legopia.Models.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId");

                    b.HasOne("Legopia.Models.Identity.UserDetails", "UserDetails")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserDetailsId");

                    b.Navigation("Product");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("Legopia.Models.Identity.Address", b =>
                {
                    b.HasOne("Legopia.Models.Identity.UserDetails", "UserDetails")
                        .WithOne("Address")
                        .HasForeignKey("Legopia.Models.Identity.Address", "UserDetailsId");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("Legopia.Models.Identity.UserRoleDetailsJoining", b =>
                {
                    b.HasOne("Legopia.Models.Identity.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Legopia.Models.Identity.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDetails");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Legopia.Models.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Legopia.Models.Entities.Coupon", b =>
                {
                    b.Navigation("OrderCouponJoinings");
                });

            modelBuilder.Entity("Legopia.Models.Entities.OrderDetails", b =>
                {
                    b.Navigation("OrderCouponJoinings");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Legopia.Models.Entities.Post", b =>
                {
                    b.Navigation("PostTagJoinings");
                });

            modelBuilder.Entity("Legopia.Models.Entities.PostCategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Legopia.Models.Entities.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImageJoining");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Legopia.Models.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Legopia.Models.Entities.ProductImage", b =>
                {
                    b.Navigation("ProductImageJoinings");
                });

            modelBuilder.Entity("Legopia.Models.Entities.Tag", b =>
                {
                    b.Navigation("PostTagJoinings");
                });

            modelBuilder.Entity("Legopia.Models.Identity.Address", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Legopia.Models.Identity.UserDetails", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Cart");

                    b.Navigation("OrderDetails");

                    b.Navigation("Posts");

                    b.Navigation("ProductReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
